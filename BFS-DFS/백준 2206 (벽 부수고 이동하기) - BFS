import sys
from collections import deque
import pprint as pp

INF = 2100000000
N, M = map(int, sys.stdin.readline().split())

MAP = []
for i in range(N):
    tmp = sys.stdin.readline().rstrip()
    MAP.append([])
    for j in range(M):
        MAP[i].append(int(tmp[j]))

move_count_0 = [[INF for i in range(M)] for j in range(N)]
move_count_1 = [[INF for i in range(M)] for j in range(N)]
visit_0 = [[0 for i in range(M)] for j in range(N)]
visit_1 = [[0 for i in range(M)] for j in range(N)]
move_count_0[0][0] = 1
visit_0[0][0] = 1
dirX = [0, 0, -1, 1]    # 상하좌우
dirY = [-1, 1, 0, 0]

Q = deque([[0, 0]])

while len(Q) > 0:
    x, y = Q.popleft()

    for i in range(4):
        X = x + dirY[i]
        Y = y + dirX[i]
        if (0 <= X < N) and (0 <= Y < M):
            if MAP[X][Y] == 0:
                if move_count_0[x][y] != INF and visit_0[X][Y] == 0:
                    move_count_0[X][Y] = move_count_0[x][y] + 1
                    Q.append([X, Y])
                    visit_0[X][Y] = 1
                if move_count_1[x][y] != INF and visit_1[X][Y] == 0:
                    move_count_1[X][Y] = move_count_1[x][y] + 1
                    Q.append([X, Y])
                    visit_1[X][Y] = 1
            else:
                if move_count_0[x][y] != INF and visit_1[X][Y] == 0:
                    move_count_1[X][Y] = move_count_0[x][y] + 1
                    Q.append([X, Y])
                    visit_1[X][Y] = 1

answer = min(move_count_0[N-1][M-1], move_count_1[N-1][M-1])
if answer != INF:
    print(answer)
else:
    print(-1)
